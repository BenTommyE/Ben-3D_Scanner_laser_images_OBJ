class exportObj {
  float xCalibration = 10.8;
  float yCalibration = 10.8;
  
  String outFilename = "3D Scann 0001.obj";
  
  exportObj() {

  }
  
  void writeHeader() {
    //make header
    appendTextToFile(outFilename, "####");
    appendTextToFile(outFilename, "#");
    appendTextToFile(outFilename, "# OBJ File Generated by Processing");
    appendTextToFile(outFilename, "#");
    appendTextToFile(outFilename, "####");


  }
  
  void writeFooter(int _PointNr3D, int scannCollom) {

    println("writeFooter: " + _PointNr3D);
    int v1, v2, v3;

    // make polygons from all points
    for(int i = 1; i<scannCollom; i++) {
      
      for(int j = 2; j<width; j++) {

          v1 = i * width + j;
          v2 = v1  - width;
          v3 = v1 - width +1;
          
          appendTextToFile(outFilename, "f " + v1 + " " + v2  + " " + v3);

          v1 = i * width + j + 1;
          v2 = v1 - 1;
          v3 = v1  - width;

          appendTextToFile(outFilename, "f " + v1 + " " + v2  + " " + v3);
      }
    
    }

  }
  
  void addLinePoint(int _x, int _y, int _z) {

    //println("X" + nf(gCodeX,4,4) + "Z-" + nf(gCodeZ,4,4));
    appendTextToFile(outFilename, "v " + nf(_x,4,4) + " " + nf(_y,4,4) + " " + nf(_z,4,4));
    
  }
  
  void addLinePoygon(int _3DPointNr) {

    
    int Even = _3DPointNr % 2;
    if(_3DPointNr>width) {
      if(Even ==0) {
        appendTextToFile(outFilename, "f " + _3DPointNr + " " + (_3DPointNr - width)  + " " + (_3DPointNr - width + 1));
      }else{
        appendTextToFile(outFilename, "f " + _3DPointNr + " " + (_3DPointNr - width)  + " " + (_3DPointNr - 1));
      }
    }
    
  }

}
